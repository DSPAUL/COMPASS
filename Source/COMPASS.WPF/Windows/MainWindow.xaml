<Window
    x:Class="COMPASS.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:dd="urn:gong-wpf-dragdrop"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:views="clr-namespace:COMPASS.Views"
    xmlns:viewmodels="clr-namespace:COMPASS.ViewModels"
    xmlns:tools ="clr-namespace:COMPASS.Tools"
    xmlns:converters ="clr-namespace:COMPASS.Converters"
    xmlns:layouts="clr-namespace:COMPASS.ViewModels.Layouts"
    d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel}"
    mc:Ignorable="d"
    Title="COMPASS" Height="540" Width="1156.8" FontSize="20"
    Foreground="{StaticResource TextColor}"  
    Background="{StaticResource WindowBackground}"
    Closing="Window_Closing" WindowState="Maximized" WindowStyle="None" 
    WindowStartupLocation="CenterScreen" MouseDown="Window_MouseDown"
    PreviewKeyDown="Window_PreviewKeyDown">
    <Window.Resources>
        <converters:WindowStateToBoolConverter x:Key="IsMaximizedConverter"/>
        <converters:ToStringConverter x:Key="ToString"/>
        <DataTemplate DataType="{x:Type layouts:ListLayoutViewModel}">
            <views:ListLayout DataContext="{Binding}"/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type layouts:CardLayoutViewModel}">
            <views:CardLayout DataContext="{Binding}"/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type layouts:TileLayoutViewModel}">
            <views:TileLayout DataContext="{Binding}"/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type layouts:HomeLayoutViewModel}">
            <views:HomeLayout DataContext="{Binding}"/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:LeftDockViewModel}">
            <views:LeftDockView DataContext="{Binding}"/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:CodexInfoViewModel}">
            <views:CodexInfoView DataContext="{Binding}"/>
        </DataTemplate>

    </Window.Resources>
    <Window.Style>
        <Style>
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome CaptionHeight="40" CornerRadius="4" GlassFrameThickness="0"
                        NonClientFrameEdges="None" ResizeBorderThickness="6"/>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Style>
    <Border BorderThickness="0">
        <DockPanel Name="MainGrid" Focusable="True">
            <!--#region Title Bar-->
            <Grid DockPanel.Dock="Top" x:Name="WindowsBar" MaxHeight="100" Background="{StaticResource TitlebarBackground}">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width ="auto"/>
                    <ColumnDefinition Width ="*"/>
                    <ColumnDefinition Width ="auto"/>
                    <ColumnDefinition Width ="auto"/>
                    <ColumnDefinition Width ="*"/>
                    <ColumnDefinition Width ="auto"/>
                    <ColumnDefinition Width ="auto"/>
                    <ColumnDefinition Width ="auto"/>
                </Grid.ColumnDefinitions>

                <Grid.Resources>
                    <!--#region DropdownBox Style-->
                    <ControlTemplate x:Key="RpgArrow" TargetType="{x:Type ToggleButton}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="20" />
                            </Grid.ColumnDefinitions>
                            <Border x:Name="Border" Grid.ColumnSpan="3" CornerRadius="4,0,0,4" BorderThickness="0"
                                    Background="{StaticResource UIElementBackground}" ClipToBounds="True" />
                            <Path x:Name="Arrow" Grid.Column="1" Fill="{StaticResource CollectionIconFill}" HorizontalAlignment="Center"
                                 VerticalAlignment="Center" Data="M0,0 L6,8 L12,0 " Margin="0,0,5,0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                                <Setter TargetName="Arrow" Property="RenderTransformOrigin" Value="0.5, 0.5"/>
                                <Setter TargetName="Arrow" Property="RenderTransform">
                                    <Setter.Value>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="1.2" ScaleX="1.2"/>
                                        </TransformGroup>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <Style x:Key="RpgDropdownStyle" TargetType="{x:Type ComboBox}">
                        <Setter Property="SnapsToDevicePixels" Value="true"/>
                        <Setter Property="OverridesDefaultStyle" Value="true"/>
                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                        <Setter Property="MinWidth" Value="120"/>
                        <Setter Property="MinHeight" Value="20"/>
                        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ComboBox}">
                                    <Grid>
                                        <ToggleButton Template="{StaticResource RpgArrow}" Focusable="false" ClickMode="Press" Style="{x:Null}"
                                                    IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>
                                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                            Margin="10,3,25,3" VerticalAlignment="Center" HorizontalAlignment="Left" />
                                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}"
                                            AllowsTransparency="True" Focusable="False" PopupAnimation="Slide" VerticalOffset="-6">
                                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}"
                                                MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                                <Border x:Name="DropDownBorder" Background="{StaticResource UIElementBackground}" BorderThickness="0" CornerRadius="0,0,4,4"/>
                                                <ScrollViewer Margin="0,6,0,6" SnapsToDevicePixels="True">
                                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                                </ScrollViewer>
                                            </Grid>
                                        </Popup>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="HasItems" Value="false">
                                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="50"/>
                                        </Trigger>
                                        <Trigger Property="IsGrouping" Value="true">
                                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <!--#endregion-->
                </Grid.Resources>

                <ContentControl Content="{StaticResource CompassLogo}" Grid.Column="0" Margin="10,0" HorizontalAlignment="Left"/>

                <!--Search Bar-->
                <Border Grid.Column="2" CornerRadius="4" Width="300" MinWidth="100" Height="35" WindowChrome.IsHitTestVisibleInChrome="True"
                    Background="{StaticResource UIElementBackground}" OpacityMask="#FF222222" Margin="30,5" DataContext="{Binding CollectionVM.FilterVM}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width ="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBox Grid.Column="0" x:Name="Searchbar" tools:AP.PlaceHolderText="Search (Ctrl+S)" Margin="0"
                             Text="{Binding SearchTerm, UpdateSourceTrigger=PropertyChanged}" 
                             Background="{x:Null}" BorderBrush="{x:Null}" Foreground="White"/>
                        <Button  Grid.Column="1" Style="{StaticResource IconBtn}" Margin="10,0" tools:AP.IconKind="Search"
                        Command="{Binding SearchCommand}" CommandParameter="{Binding Text, ElementName=Searchbar}" 
                                 IsDefault="{Binding ElementName=Searchbar, Path=IsKeyboardFocused}" ToolTip="Search"/>
                    </Grid>
                </Border>

                <!--Collection Selection-->
                <Border Background="{StaticResource UIElementBackground}" CornerRadius="4" Grid.Column="3" Margin="0,5" Height="35"
                        WindowChrome.IsHitTestVisibleInChrome="True" DataContext="{Binding CollectionVM}">
                    <StackPanel Orientation="Horizontal">
                        <!--Collection Dropdown-->
                        <ComboBox Style="{StaticResource RpgDropdownStyle}" SelectedItem="{Binding CurrentCollection, Mode=TwoWay}" 
                                  DisplayMemberPath="DirectoryName" ItemsSource="{Binding AllCodexCollections}" 
                                  SelectionChanged="CollectionComboBox_SelectionChanged"/>
                        <Rectangle Fill="{StaticResource Separator}" Width="2" Height="auto"/>
                        <!--Create Collection-->
                        <Button Style="{StaticResource IconBtn}" tools:AP.IconKind="FolderPlus" Foreground="{StaticResource CollectionIconFill}" ToolTip="Create New Collection"
                                            Visibility="{Binding CreateCollectionVisibility,Converter={StaticResource ToVisibilityConverter},ConverterParameter=True}"
                                        Command="{Binding ToggleCreateCollectionCommand}"/>
                        <StackPanel Orientation="Horizontal" x:Name="CollectionCreation"
                                        Visibility="{Binding CreateCollectionVisibility, Converter={StaticResource ToVisibilityConverter}, FallbackValue=Collapsed}">
                            <TextBox x:Name="NewCollectionName" tools:AP.PlaceHolderText="New Collection" FontSize="16" VerticalAlignment="Center" 
                                             Background="{StaticResource TransparentBlack}" BorderBrush="{StaticResource DarkUIElementBackground}" MaxLength="50"
                                            Foreground="{StaticResource TextColor}" Margin="0" BorderThickness="0" MinWidth="80">
                                <TextBox.Style>
                                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=CollectionCreation, Path=IsVisible}" Value="true">
                                                <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=NewCollectionName}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ElementName=CollectionCreation, Path=IsVisible}" Value="false">
                                                <Setter Property="Text" Value=""/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                            <Button tools:AP.IconKind="Check" Foreground="{StaticResource AcceptFill}" Style="{StaticResource IconBtn}" 
                                            IsDefault="{Binding ElementName=NewCollectionName, Path=IsFocused}"
                                            Command="{Binding CreateCollectionCommand}" CommandParameter="{Binding ElementName=NewCollectionName, Path=Text}">
                            </Button>
                            <Button tools:AP.IconKind="Close" Foreground="{StaticResource CancelFill}" Command="{Binding ToggleCreateCollectionCommand}"
                                            Style="{StaticResource IconBtn}"/>
                        </StackPanel>
                        <Rectangle Fill="{StaticResource Separator}" Width="2" Height="auto"/>
                        <!--Edit Collection-->
                        <Button tools:AP.IconKind="FolderEdit" Foreground="{StaticResource CollectionIconFill}" 
                                    Style="{StaticResource IconBtn}" ToolTip="Rename Collection" Command="{Binding ToggleEditCollectionCommand}"
                                    Visibility="{Binding EditCollectionVisibility,Converter={StaticResource ToVisibilityConverter},ConverterParameter=True}"/>
                        <StackPanel Orientation="Horizontal" x:Name="CollectionEditing"
                                        Visibility="{Binding EditCollectionVisibility, Converter={StaticResource ToVisibilityConverter}, FallbackValue=Collapsed}">
                            <TextBox x:Name="EditCollectionName" Text="{Binding CurrentCollection.DirectoryName, Mode=OneWay}" FontSize="16" 
                                        VerticalAlignment="Center" Background="{StaticResource TransparentBlack}" MaxLength="50"
                                        Foreground="{StaticResource TextColor}" Margin="0" BorderThickness="0" MinWidth="50">
                                <TextBox.Style>
                                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=CollectionEditing, Path=IsVisible}" Value="true">
                                                <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=EditCollectionName}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                            <Button tools:AP.IconKind="Check" Foreground="{StaticResource AcceptFill}" Style="{StaticResource IconBtn}" 
                                        IsDefault="{Binding ElementName=EditCollectionName, Path=IsFocused}"
                                        Command="{Binding EditCollectionNameCommand}" CommandParameter="{Binding ElementName=EditCollectionName, Path=Text}">
                            </Button>
                            <Button tools:AP.IconKind="Close" Foreground="{StaticResource CancelFill}" 
                                        Command="{Binding ToggleEditCollectionCommand}" Style="{StaticResource IconBtn}"/>
                        </StackPanel>
                        <Rectangle Fill="{StaticResource Separator}" Width="2" Height="auto"/>
                        <!--More Options Collection-->
                        <Button tools:AP.IconKind="DotsVertical" Foreground="{StaticResource CollectionIconFill}" Margin="-2,0"
                                Style="{StaticResource IconBtn}" ToolTip="More Actions" Width="25" Click="Toggle_ContextMenu">
                            <Button.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Import..." ToolTip="Import a Collection" tools:AP.IconKind="FolderDownload" Command="{Binding ImportCommand}"/>
                                    <MenuItem Header="Export..." ToolTip="Share this Collection with other COMPASS users" tools:AP.IconKind="FolderUpload" Command="{Binding ExportCommand}"/>
                                    <MenuItem Header="Merge into " tools:AP.IconKind="FolderMove" ItemsSource="{Binding CollectionDirectories}">
                                        <MenuItem.ItemContainerStyle>
                                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="MenuItem.Command" Value="{Binding Path=DataContext.MergeCollectionIntoCommand,
                                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}"/>
                                                <Setter Property="MenuItem.CommandParameter" Value="{Binding Header, RelativeSource={RelativeSource self}, Converter={StaticResource ToString}}"/>
                                            </Style>
                                        </MenuItem.ItemContainerStyle>
                                    </MenuItem>
                                    <MenuItem Header="Delete" ToolTip="Delete this Collection" tools:AP.IconKind="Delete" Command="{Binding DeleteCollectionCommand}"/>
                                </ContextMenu>
                            </Button.ContextMenu>
                        </Button>
                    </StackPanel>
                </Border>
                
                <!--Settings button-->
                <Button Click="Toggle_ContextMenu" Grid.Column="5" tools:AP.IconKind="Settings" Height="25" Margin="15,0"
                         WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Settings">
                    <Button.ContextMenu>
                        <ContextMenu Placement="Bottom">
                            <MenuItem Header="Settings" Command="{Binding OpenSettingsCommand}" tools:AP.IconKind="Cog"/>
                            <MenuItem Header="Check for Updates" Command="{Binding CheckForUpdatesCommand}" tools:AP.IconKind="Autorenew"/>
                            <MenuItem Header="What's New" Command="{Binding OpenSettingsCommand}" CommandParameter="What's New" tools:AP.IconKind="AlertDecagram"/>
                            <MenuItem Header="Report A Bug" tools:AP.IconKind="Bug" Command="{Binding NavigateToLinkTree}"/>
                            
                            <!--<MenuItem Header="About" Command="{Binding OpenSettingsCommand}" CommandParameter="About"/>-->
                        </ContextMenu>
                    </Button.ContextMenu>
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="{StaticResource TextMutedColor}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <materialDesign:PackIcon Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Foreground="{TemplateBinding Foreground}"
                                        Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tools:AP.IconKind)}"
                                        Background="{TemplateBinding Background}"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource AccentColor}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>

                <!--Window management (minimize, maximize, close)-->
                <StackPanel Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True"
                HorizontalAlignment="Right" Margin="15,0,0,0"
                VerticalAlignment="Stretch" Grid.Column="7">
                    <StackPanel.Resources>
                        <Style TargetType="{x:Type Button}" >
                            <Setter Property="Width" Value="40"/>
                            <Setter Property="Padding" Value="7"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" Value="{StaticResource UIElementBackground}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="{x:Type ToggleButton}" >
                            <Setter Property="Width" Value="40"/>
                            <Setter Property="Padding" Value="7"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" Value="{StaticResource UIElementBackground}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Resources>

                    <Button x:Name="MinimizeButton" ToolTip="Minimize" Click="MinimizeWindow" BorderBrush="{x:Null}">
                        <materialDesign:PackIcon Kind="WindowMinimize" VerticalAlignment="Bottom"/>
                    </Button>

                    <ToggleButton x:Name="MaximizeButton" Click="MaximizeButton_Click" BorderBrush="{x:Null}" ToolTip="Maximize"
                            IsChecked="{Binding WindowState, RelativeSource={RelativeSource FindAncestor,
            AncestorType=Window}, Converter={StaticResource IsMaximizedConverter}, Mode=OneWay}">
                        <Grid>
                            <materialDesign:PackIcon Kind="WindowMaximize" Width="15"
                Visibility="{Binding IsChecked, RelativeSource={RelativeSource FindAncestor,
                AncestorType={x:Type ToggleButton}}, Converter={StaticResource ToVisibilityConverter}, ConverterParameter=true}"/>
                            <materialDesign:PackIcon Kind="WindowRestore" Width="15"
                Visibility="{Binding IsChecked, RelativeSource={RelativeSource FindAncestor,
                AncestorType={x:Type ToggleButton}}, Converter={StaticResource ToVisibilityConverter}, ConverterParameter=false}"/>
                        </Grid>
                    </ToggleButton>

                    <Button x:Name="CloseButton" Click="CloseButton_Click" BorderBrush="{x:Null}" ToolTip="Close">
                        <materialDesign:PackIcon Kind="WindowClose"/>
                        <Button.Style>
                            <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="Red" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </StackPanel>
            </Grid>
            <!--#endregion-->

            <!--Bottom bar-->
            <Grid DockPanel.Dock="Bottom" Height="25" Background="{StaticResource TitlebarBackground}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>

                <StackPanel Orientation="Horizontal" Grid.Column="0" >
                    <TextBlock Margin="10,0" FontFamily="Segoe UI">
                        Items Shown:
                        <Run Text="{Binding BindableCollectionVM.FilterVM.FilteredCodices.Count, Mode=OneWay, FallbackValue=0}"/>
                        /
                        <Run Text="{Binding BindableCollectionVM.CurrentCollection.AllCodices.Count, Mode=OneWay, FallbackValue=0}"/>
                    </TextBlock>
                    <Rectangle Width="2" Fill="{StaticResource Separator}"/>
                </StackPanel>

                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal" Grid.Column="1"
                            Visibility="{Binding ProgressVM.WorkInProgress, Converter={StaticResource ToVisibilityConverter}}">
                    <TextBlock Text="{Binding ProgressVM.FullText, FallbackValue=Stuff in Progress, Mode=OneWay}" Margin="20,0" 
                               FontFamily="Segoe UI"/>
                    <ProgressBar x:Name="ProgBar" Minimum="0" Maximum="100" Height="12" Width="200"
                                 Value="{Binding ProgressVM.Percentage, FallbackValue=100, Mode=OneWay}" 
                                 Style="{StaticResource RoundedProgressBar}"
                                 Foreground="{StaticResource AccentColor}" 
                                 Background="{StaticResource UIElementBackground}"/>
                    <Button Style="{StaticResource IconBtn}" tools:AP.IconKind="CloseCircleOutline" Margin="5,2"
                            Command="{Binding ProgressVM.CancelTasksCommand}" ToolTip="Cancel Task"/>
                </StackPanel>
                
                <!--Internet status indicator-->
                <materialDesign:PackIcon Grid.Column="2" Margin="5,0" Padding="0" Kind="WebOff"
                                         Foreground="{StaticResource OfflineFill}" ToolTip="No Internet Connection Found"
                                         Visibility="{Binding IsOnline, Converter={StaticResource ToVisibilityConverter}, 
                                            ConverterParameter=True}"/>
                <Button Grid.Column="3" Command="{Binding OpenSettingsCommand}" CommandParameter="About" 
                        Cursor="Hand" ToolTip="Go to 'About'">
                    <Button.Template>
                        <ControlTemplate>
                            <StackPanel Orientation="Horizontal" >
                                <StackPanel.Style>
                                    <Style TargetType="StackPanel">
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{StaticResource UIElementBackground}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </StackPanel.Style>
                                <Rectangle Width="2" Fill="{StaticResource Separator}"/>
                                <TextBlock Text="{Binding VersionName, FallbackValue=v1.0.0}" FontFamily="Segoe UI" Margin="10,0"
                                  Typography.Capitals="AllSmallCaps" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </StackPanel>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </Grid>

            <UserControl DockPanel.Dock="Left" Content="{Binding LeftDockVM}"/>

            <UserControl DockPanel.Dock="Right" Content="{Binding CodexInfoVM}"/>


            <!--#region Main Dock-->
           
            <!--#endregion-->
           
        </DockPanel>
    </Border>

</Window>
    
 
